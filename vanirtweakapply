#!/system/xbin/bash
# Nuclearmistake, Sonicxml
# Inspiration from Jakebites and Liberty's liberty.cfg and associated init.d scripts



#check for persistent settings file on sdcard
if [ -e /system/etc/vanir.cfg ]; then
    sync
    sysrw
    if [ ! -e /sdcard/vanir.cfg ]; then
        #virgin sdcard... let's change that.
        echo "SLIPPING YOUR /SDCARD THE BEEF INJECTION"
        cp /system/etc/vanir.cfg /sdcard/vanir.cfg
    else
        cat /sdcard/vanir.cfg | uniq -s 2 -u > /sdcard/vanir.cfg2
        mv /sdcard/vanir.cfg2 /sdcard/vanir.cfg
        #vanir.cfg exists, so let's add defaults for config values that may not have previously existed
        if [ `cat /sdcard/vanir.cfg | grep '### *ZRAM' | wc -l` -ne 1 ]; then
            cat /sdcard/vanir.cfg | grep -vi "zram" > /sdcard/vanir.cfg2
            mv /sdcard/vanir.cfg2 /sdcard/vanir.cfg
            echo >> /sdcard/vanir.cfg
            echo >> /sdcard/vanir.cfg
            echo '### ZRAM' >> /sdcard/vanir.cfg
            echo '### This increases virtual memory using swap or compression or something' >> /sdcard/vanir.cfg
            echo '### (1=enabled/recommended, 0=disabled)' >> /sdcard/vanir.cfg
            echo >> /sdcard/vanir.cfg
            echo 'zramStatus=1' >> /sdcard/vanir.cfg
        fi
        if [ `cat /sdcard/vanir.cfg | grep '### *KSM2' | wc -l` -eq 0 ]; then
            echo "Switching KSM to new defaults"
            cat /sdcard/vanir.cfg | grep -vi "ksm" > /sdcard/vanir.cfg2
            mv /sdcard/vanir.cfg2 /sdcard/vanir.cfg
            echo >> /sdcard/vanir.cfg
            echo >> /sdcard/vanir.cfg
            echo '### KSM2' >> /sdcard/vanir.cfg
            echo '#ksmRun=1' >> /sdcard/vanir.cfg
            echo '#ksmSleep=4000' >> /sdcard/vanir.cfg
            echo '#ksmPagesToScan=128' >> /sdcard/vanir.cfg
        fi
        cat /sdcard/vanir.cfg | grep '###'
    fi
    rm /system/etc/vanir.cfg
    sync
    sysro
fi

if [ -e /sdcard/vanir.cfg ]; then
    . /sdcard/vanir.cfg
elif [ -e /data/media/vanir.cfg ]; then
    . /data/media/vanir.cfg
fi

t()
{
        [ ! $1 ] && return 1 || [ ! $2 ] && return 1 || [ ! $3 ] && echo "Skipping application because $1 not defined in config" && return 1 || [ ! -e $2 ] && echo "Skipping application because $2 does not exist" && return 1
        sedsafepath=`echo $2 | sed 's/\//\\\\\//g'`
        args="`echo $* | sed "s/.*$sedsafepath //g"`"
        echo "Applying $1. Echoing \"$args\" > $2" && echo "$args" > $2
        return 0
}

#prevent conflicts for people using leantweaks instead
[ -e /etc/init.d/99leantweaks ] && [ $force_override_leantweaks -eq 0 ] && exit

#if not enabled, then set gpuOC for user experience insurance, then exit

if [ -z "$enableTweaks" ] || [ $enableTweaks -eq 0 ]; then
    exit
fi

#########################################
########### apply settings ##############
#########################################

# SmartReflex
t srMPU /sys/kernel/debug/smartreflex/sr_mpu/autocomp         $srMPU      # For MPU
t srCPRE /sys/kernel/debug/smartreflex/sr_core/autocomp        $srCORE     # For Core
t srIVA /sys/kernel/debug/smartreflex/sr_iva/autocomp         $srIVA      # For IVA

# replace vestigial 512 value with more popular 512mhz value
if [ $gpuOC ] && [ $gpuOC -gt 2 ]; then
    if [ -e /sdcard/vanir.cfg ]; then
        sed -i 's/gpuOC.*/gpuOC=2/g' /sdcard/vanir.cfg
        . /sdcard/vanir.cfg
    elif [ -e /data/media/vanir.cfg ]; then
        sed -i 's/gpuOC.*/gpuOC=2/g' /data/media/vanir.cfg
        . /data/media/vanir.cfg
    fi
fi
t gpuOC /sys/devices/system/cpu/cpu0/cpufreq/gpu_oc           $gpuOC      # GPU Overclock
t gpuGOV /sys/kernel/pvr_simple_gov/simple_governor           $gpuGOV      # GPU Governor

t scaleGov /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor $scaleGov   # Governor Control
[ "$scaleGov" = "interactive" ] && vanirinteractivegovernorgovernor

t maxFreq /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq $maxFreq    #CPU max
t minFreq /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq $minFreq    #CPU min
t maxFreqScreenOff /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq $maxFreqScreenOff

t TWstatus /sys/class/misc/touchwake/enabled                     $TWstatus   # Touch Wake enable
t TWdelay /sys/class/misc/touchwake/delay                       $TWdelay    # Touch wake delay

t BLX /sys/class/misc/batterylifeextender/charging_limit    $BLX        # BLX (Battery Life Extender)

t ffc /sys/kernel/fast_charge/force_fast_charge             $ffc        # Enable/disable USB fast charging

#################################################
############### wll v2.0 ########################

# check for legacy value (Y/N) and update to 0=false, 1=true
[ ! -z "$wll" ] && [ `echo $wll | grep -i y | wc -l` -gt 0 ] && sed -i 's/wll=[Yy]/wll=1/g' || [ `echo $wll | grep -i n | wc -l` -gt 0 ] && sed -i 's/wll=[Nn]/wll=0/g'

# to support more kernels, let's see what value is currently in /sys/module/bcmdhd/parameters/wifi_pm, and echo the correct thing
currwll=$(cat /sys/module/bcmdhd/parameters/wifi_pm)
case $wll in
    0)  case $currwll in
            [YN]) t wll /sys/module/bcmdhd/parameters/wifi_pm N;;
            [yn]) t wll /sys/module/bcmdhd/parameters/wifi_pm n;;
            [01]) t wll /sys/module/bcmdhd/parameters/wifi_pm 0;;
        esac;;
    1)  case $currwll in
            [YN]) t wll /sys/module/bcmdhd/parameters/wifi_pm Y;;
            [yn]) t wll /sys/module/bcmdhd/parameters/wifi_pm y;;
            [01]) t wll /sys/module/bcmdhd/parameters/wifi_pm 1;;
        esac;;
esac

################################################

t OMAPgamma /sys/devices/platform/omapdss/manager0/gamma          $OMAPgamma  # Selects GAMMA preset to control contrast

t GammaOffset /sys/class/misc/colorcontrol/v1_offset               $GammaOffset # V1 Gamma Offsets

t ColorSafety /sys/class/misc/colorcontrol/safety_enabled           $ColorSafety
t ColorMult /sys/class/misc/colorcontrol/multiplier               $ColorMult  # Color Multipliers

t VolBoost /sys/class/misc/soundcontrol/volume_boost             $VolBoost   # Headset Volume Boost

t HighPerf /sys/class/misc/soundcontrol/highperf_enabled         $HighPerf   # High Performance Audio

t hotPlug /sys/devices/system/cpu/cpu1/online $hotPlug

#apply zram setting
[ ! $zramStatus ] && echo "Skipping application because zramStatus not defined in config" || [ $zramStatus -eq 1 ] && zram on || zram off

#apply KSM setting
t ksmRun /sys/kernel/mm/ksm/run $ksmRun
[ $ksmRun ] && t ksmSleep /sys/kernel/mm/ksm/sleep_millisecs $ksmSleep
[ $ksmRun ] && t ksmPagesToScan /sys/kernel/mm/ksm/pages_to_scan $ksmPagesToScan
